import stdlib.collections.hashset.*;
import stdlib.collections.hashmap.*;
import stdlib.collections.list.*;
import stdlib.optutils.*;

struct TerrainController {
  domino &GameToDominoConnection;
  vivimap &MemberToViewMapper;
  terrain PatternMap<TerrainTile>;
  elevationStepHeight int;

  tilePresenters HashMap<Location, TerrainTilePresenter, LocationHasher, LocationEquator>;

  maybeMouseHighlightedLocation! Opt<Location>;
}


func TerrainController(
    domino &GameToDominoConnection,
    vivimap &MemberToViewMapper,
    terrain PatternMap<TerrainTile>,
    elevationStepHeight int)
TerrainController {
  //this.domino = domino;
  //this.terrain = terrain;

  self =
    TerrainController(
      domino,
      vivimap,
      terrain,
      elevationStepHeight,
      HashMap<Location, TerrainTilePresenter, LocationHasher, LocationEquator>(
        LocationHasher(), LocationEquator()),
      None<Location>());

  foreach [location Location, tile &TerrainTile] in &self.terrain.tiles {
    self.AddTerrainTile(location, &tile);
  }

  ret self;
}

func GetMaybeMouseHighlightLocation(self &TerrainController) Opt<Location> {
  ret self.maybeMouseHighlightedLocation.clone();
}

//   public void DestroyTerrainController() {
//     foreach entry in tilePresenters {
//       entry.Value.DestroyTerrainTilePresenter();
//     }
//   }
// 
func UpdateLocationHighlighted(self &TerrainController, location Location) {
  highlighted = &Some(location) == &self.maybeMouseHighlightedLocation;
  maybeNewMousedTerrainTilePresenter = self.tilePresenters.get(location);
  if not maybeNewMousedTerrainTilePresenter.isEmpty() {
    newMousedTerrainTilePresenter = &maybeNewMousedTerrainTilePresenter.get();
    newMousedTerrainTilePresenter.SetHighlighted(highlighted);
  }
}

func AddTerrainTile(self &TerrainController, location Location, tile &TerrainTile) {
  presenter =
    TerrainTilePresenter(
      &self.domino,
      self.vivimap,
      &self.terrain,
      tile,
      location);
  self.tilePresenters.add(location, presenter);
}


func SetHoveredLocation(self &TerrainController, newMaybeMouseHighlightedLocation &Opt<Location>) {
  if newMaybeMouseHighlightedLocation != &self.maybeMouseHighlightedLocation {
    oldMaybeMouseHighlightedLocation =
      set self.maybeMouseHighlightedLocation = newMaybeMouseHighlightedLocation.clone();
    if oldMaybeMouseHighlightedLocation.nonEmpty() {
      self.UpdateLocationHighlighted(oldMaybeMouseHighlightedLocation.get());
    }
    if newMaybeMouseHighlightedLocation.nonEmpty() {
      self.UpdateLocationHighlighted(newMaybeMouseHighlightedLocation.get());
    }
  }
}

