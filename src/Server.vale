import stdlib.*;
import domino.*;
import stdlib.path.*;
import stdlib.resultutils.*;
import rocketvale.*;
import valejson.*;
import stdlib.stringutils.*;
import domino.model.*;
import terrain.*;
import terrain.model.*;
import domino.model.animation.*;
import domino.network.*;

struct EditorServer {
  resourcesPath str;
  instance! Opt<EditorInstance>;
}
impl IRequestHandler for EditorServer;

struct EditorInstance {
  domino GameToDominoConnection;
  vivimap MemberToViewMapper;
  maybeLookedLocation! Opt<Location>;
  membersView ListView;
  lookPanelView LookPanelView;
  lookatOffsetToCamera Vec3i;
  terrainController TerrainController;
  // turn this into a HashSet based on Unit, perhaps casting pointer to integer
  units HashMap<int, Unit, IntHasher, IntEquator>;
  unitPresenters HashMap<int, UnitPresenter, IntHasher, IntEquator>;
  locToUnit HashMap<Location, &!Unit, LocationHasher, LocationEquator>;
  unoccupiedWalkableLocs HashSet<Location, LocationHasher, LocationEquator>;
  player! Opt<&!Unit>;
}

func HandleEvent(
  server &!EditorServer,
  node &JsonObject)
Result<JsonNode, str> {
  maybe_event_type_str = expect_obj_member_str(node, "event_type");
  if maybe_event_type_str.is_err() {
    ret Err<JsonNode, str>(maybe_event_type_str.expect_err());
  }
  event_type_str = maybe_event_type_str.expect();

  if event_type_str == "Start" {
    maybe_request = ParseStartRequest(&node);
    if maybe_request.is_err() {
      ret Err<JsonNode, str>(maybe_request.expect_err());
    }
    request = (maybe_request).expect();

    maybe_instance = HandleStartRequest(server.resourcesPath, &request);
    if maybe_instance.is_err() {
      ret Err<JsonNode, str>(maybe_instance.expect_err());
    }
    instance = (maybe_instance).expect();
    
    set server.instance = Some(instance);
  } else if event_type_str == "SetHoveredLocation" {
    maybe_request = ParseSetHoveredLocationRequest(&node);
    if maybe_request.is_err() {
      ret Err<JsonNode, str>(maybe_request.expect_err());
    }
    request = (maybe_request).expect();

    maybe_result = HandleSetHoveredLocationRequest(&!server.instance!.get(), &request);
    if maybe_result.is_err() {
      ret Err<JsonNode, str>((maybe_result).expect_err());
    }
  } else if event_type_str == "LocationMouseDown" {
    maybe_request = ParseLocationMouseDownRequest(&node);
    if maybe_request.is_err() {
      ret Err<JsonNode, str>(maybe_request.expect_err());
    }
    request = (maybe_request).expect();

    maybe_result = HandleLocationMouseDownRequest(&!server.instance!.get(), &request);
    if maybe_result.is_err() {
      ret Err<JsonNode, str>((maybe_result).expect_err());
    }
  } else if event_type_str == "KeyDown" {
    maybe_request = ParseKeyDownRequest(&node);
    if maybe_request.is_err() {
      ret Err<JsonNode, str>(maybe_request.expect_err());
    }
    request = (maybe_request).expect();

    maybe_result = HandleKeyDownRequest(&!server.instance!.get(), &request);
    if maybe_result.is_err() {
      ret Err<JsonNode, str>((maybe_result).expect_err());
    }
  } else {
    ret Err<JsonNode, str>("Unknown request type: " + event_type_str);
  }

  commands_json_arr =
    JsonArray(
      if not server.instance.isEmpty() {
        server.instance!.get().domino!.TakeCommands()
      } else {
        Array<mut, JsonNode>(0)
      });
  response_obj = JsonObject();
  response_obj.fields!.add("commands", commands_json_arr);
  ret Ok<JsonNode, str>(response_obj);
}

func handle(self &!EditorServer impl IRequestHandler, request_path str, request_json str) str {
  maybe_request_root_node = jsonToNode(request_json.slice());
  if maybe_request_root_node.is_err() {
    ret "Couldn't parse request: " + maybe_request_root_node.expect_err();
  }
  request_root_node = (maybe_request_root_node).expect();

  maybe_request_root_obj = (request_root_node).as<JsonObject>();
  if maybe_request_root_obj.is_err() {
    ret "Request wasn't json object!";
  }
  request_root_obj = (maybe_request_root_obj).expect();

  response_obj_result = HandleEvent(self, &request_root_obj);
  if response_obj_result.is_err() {
    ret "Error: " + response_obj_result.expect_err();
  }
  response_obj = (response_obj_result).expect();

  ret "Response: " + response_obj.str();
}

func UpdateLookPanelView(server &!EditorInstance) {
  maybeLocation = server.terrainController.GetMaybeMouseHighlightLocation();
  if &maybeLocation != &server.maybeLookedLocation {
    set server.maybeLookedLocation = maybeLocation.clone();
    if maybeLocation.isEmpty() {
      server.lookPanelView!.SetStuff(false, "", "", List<(InitialSymbol, str)>());
    } else {
      location = maybeLocation.get();
      message = "(" + location.group_x + ", " + location.group_y + ", " + location.index_in_group + ")";

      symbolsAndDescriptions = List<(InitialSymbol, str)>();
      if server.terrainController.terrain.tiles.ContainsKey(location) {
        set message = message + " elevation " + server.terrainController.terrain.tiles.get(location).get().elevation;
        foreach member in server.terrainController.terrain.tiles.get(location).get().members {
          symbol =
              InitialSymbol(
                  InitialSymbolGlyph(
                      SymbolId("AthSymbols", 114),
                      ConstantVec4iAnimation(Vec4i(255, 255, 255, 255))),
                  Some(
                      InitialSymbolOutline(
                          OuterOutline(),
                          ConstantVec4iAnimation(Vec4i(0, 0, 0, 0)))),
                  None<InitialSymbolSides>(),
                  180,
                  100);
          symbolsAndDescriptions!.add((symbol, member));
        }
      }

      server.lookPanelView!.SetStuff(true, message, "", symbolsAndDescriptions);
    }
  }
}



// TODO:
// - put the panic back in in MemberToViewMapper, we were hitting constraint violations,
//   need to be able to unlet some locals for it.
exported func main() {
  if numMainArgs() < 1 {
    panic("Usage: atharia vivimap.json");
  }
  resourcesPath = getMainArg(1);
  runServer(&EditorServer(resourcesPath, None<EditorInstance>()));
}
