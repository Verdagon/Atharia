

struct TerrainTilePresenter {
  domino &GameToDominoConnection;
  terrainTile &TerrainTile;
  location Location;

  tileViewId i64;

  highlighted! bool;
}

func ComposeComponent(loc Location, initialTile &InitialTile, self &DecorationComponent) {
  rand = XS32Rand(i64(loc.group_x * 13 + loc.group_y * 17 + loc.index_in_group * 23));

  if self.name == "rocks" {
    set initialTile.topColor = ConstantVec4iAnimation(Vec4i(30, 30, 30, 255));
    set initialTile.sideColor = ConstantVec4iAnimation(Vec4i(20, 20, 20, 255));
    set initialTile.maybeOverlaySymbol =
        Some(
              InitialSymbol(
                  InitialSymbolGlyph(
                      SymbolId("AthSymbols", 102),
                      ConstantVec4iAnimation(Vec4i(128, 128, 128, 50))),
                  Some(
                      InitialSymbolOutline(
                          OuterOutline(),
                          ConstantVec4iAnimation(Vec4i(0, 0, 0, 255)))),
                  None<InitialSymbolSides>(),
                  0,
                  100));
  } else if self.name == "grass" {
    set initialTile.topColor = ConstantVec4iAnimation(Vec4i(0, 37, 0, 255));
    set initialTile.sideColor = ConstantVec4iAnimation(Vec4i(0, 25, 0, 255));
    r = rand.Next().TruncateI64ToI32().abs().mod(8);
    set initialTile.maybeOverlaySymbol =
        if r < 4 {
          Some(
                InitialSymbol(
                    InitialSymbolGlyph(
                        SymbolId(
                            "AthSymbols",
                            if r == 0 { 66 }
                            else if r == 1 { 62 }
                            else if r == 2 { 55 }
                            else { 69 }),
                        ConstantVec4iAnimation(Vec4i(0, 50, 0, 255))),
                    None<InitialSymbolOutline>(),
                    None<InitialSymbolSides>(),
                    0,
                    100))
        } else {
          None<InitialSymbol>()
        };
  } else if self.name == "water" {
    set initialTile.topColor = ConstantVec4iAnimation(Vec4i(0, 20, 48, 255));
    set initialTile.sideColor = ConstantVec4iAnimation(Vec4i(0, 15, 32, 255));
    r = rand.Next().TruncateI64ToI32().abs().mod(2);
    set initialTile.maybeOverlaySymbol =
        if r == 0 {
          Some(
                InitialSymbol(
                    InitialSymbolGlyph(
                        SymbolId("AthSymbols", 111),
                        ConstantVec4iAnimation(Vec4i(12, 35, 96, 50))),
                    None<InitialSymbolOutline>(),
                    None<InitialSymbolSides>(),
                    0,
                    100))
        } else {
          None<InitialSymbol>()
        };
  } else {
    println("Unknown decoration component: {self.name}");
  }
}

func TerrainTilePresenter(
  domino &GameToDominoConnection,
  vivimap &MemberToViewMapper,
  terrain &PatternMap<TerrainTile>,
  terrainTile &TerrainTile,
  location Location)
TerrainTilePresenter {

  highlighted = false;

  description = MakeTileDescription(location, &terrainTile, highlighted);

  tileViewId = domino.CreateTile(description);

  self =
      TerrainTilePresenter(
          domino,
          terrainTile,
          location,
          tileViewId,
          highlighted);

  ret self;
}

//     private static Vec3 CalculatePosition(int elevationStepHeight, Pattern pattern, Location location, int elevation) {
//       var positionVec2 = pattern.GetTileCenter(location);
//       var positionVec3 = new Vec3(positionVec2.x, positionVec2.y, elevation * elevationStepHeight);
//       ret positionVec3;
//     }
// 
func SetHighlighted(self &TerrainTilePresenter, highlighted bool) {
  println("Setting location {self.location} to highlighted={highlighted})");
  set self.highlighted = highlighted;
  self.RefreshSurfaceColor();
}

func RefreshSurfaceColor(self &TerrainTilePresenter) {
  self.domino.SetSurfaceColor(
      self.tileViewId,
      MakeTileDescription(self.location, &self.terrainTile, self.highlighted).topColor.clone());
}

func RefreshSideColor(self &TerrainTilePresenter) {
  vassert(self.membersSideColors.len() > 0, "No side color!");
  self.domino.SetCliffColor(self.tileViewId, GrassSideColor());
}

func RefreshFeature(self &TerrainTilePresenter) {
  //self.domino.SetFeature(
  //    self.tileViewId,
  //    if self.membersFeatures.len() == 0 { None<InitialSymbol>() }
  //    else { Some<InitialSymbol>(self.membersFeatures.get(self.membersFeatures.len() - 1).1.clone()) });
}


func RefreshOverlay(self &TerrainTilePresenter) {
  //println("RefreshOverlay len " + self.membersOverlays.len());
  //self.domino.SetOverlay(
  //  self.tileViewId,
  //  CalculateMaybeOverlay(&self.membersOverlays));
}

func RefreshItems(self &TerrainTilePresenter) {
  self.domino.ClearItems(self.tileViewId);
  foreach [id, item] in self.membersItems {
    self.domino.AddItem(self.tileViewId, id, item.clone());
  }
}

func SetElevation(self &TerrainTilePresenter, elevation int) {
  set self.terrainTile.elevation = elevation;
  self.domino.SetElevation(self.tileViewId, elevation);
}

//func CalculateMaybeOverlay(membersOverlays &List<(i64, InitialSymbol)>) Opt<InitialSymbol> {
//  if membersOverlays.len() == 0 {
//    ret None<InitialSymbol>();
//  }
//  ret Some(membersOverlays.get(membersOverlays.len() - 1).1.clone());
//}
//
//
//func CalculateMaybeFeature(membersFeatures &List<(i64, InitialSymbol)>) Opt<InitialSymbol> {
//  if membersFeatures.len() == 0 {
//    ret None<InitialSymbol>();
//  }
//  ret Some(membersFeatures.get(membersFeatures.len() - 1).1.clone());
//}

func MakeTileDescription(loc Location, terrainTile &TerrainTile, highlighted bool) InitialTile {
  description =
      InitialTile(
          loc,
          terrainTile.elevation,
          ConstantVec4iAnimation(Vec4i(255, 0, 255, 255)),
          ConstantVec4iAnimation(Vec4i(255, 0, 255, 255)),
          None<InitialSymbol>(),
          None<InitialSymbol>(),
          List<(i64, InitialSymbol)>());
  foreach component in terrainTile.components {
    ComposeComponent(loc, &description, component);
  }
  set description.topColor =
      MaybeTintTopColor(description.topColor.clone(), highlighted);
  ret description;
}

func MaybeTintTopColor(existingColor Vec4iAnimation, highlighted bool) Vec4iAnimation {
  if highlighted {
    ret DivideVec4iAnimation(
        AddVec4iAnimation(
            MultiplyVec4iAnimation(
                existingColor, ConstantVec4iAnimationAll(87)),
            MultiplyVec4iAnimation(
                ConstantVec4iAnimationWhite(), ConstantVec4iAnimationAll(13))),
        ConstantVec4iAnimationAll(100));
  } else {
    ret existingColor;
  }
}
