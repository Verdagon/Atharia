
struct TerrainTilePresenter {
  domino &!GameToDominoConnection;
  terrainTile &!TerrainTile;
  location Location;

  tileViewId i64;

  highlighted! bool;
}

func GrassSurfaceColor() ConstantVec4iAnimation { ConstantVec4iAnimation(Vec4i(0, 75, 0, 100)) }
func GrassSideColor() ConstantVec4iAnimation { ConstantVec4iAnimation(Vec4i(0, 50, 0, 100)) }

func TerrainTilePresenter(
  domino &!GameToDominoConnection,
  vivimap &MemberToViewMapper,
  terrain &!PatternMap<TerrainTile>,
  terrainTile &!TerrainTile,
  location Location)
TerrainTilePresenter {

  highlighted = false;

  initialTileDescription =
      InitialTile(
          location,
          terrainTile.elevation,
          CalculateTintedFrontColor(&GrassSurfaceColor(), highlighted),
          GrassSideColor(),
          None<InitialSymbol>(),
          None<InitialSymbol>(),
          List<(i64, InitialSymbol)>());
  tileViewId = domino!.CreateTile(initialTileDescription);

  self =
    TerrainTilePresenter(
      domino,
      terrainTile,
      location,
      tileViewId,
      highlighted);

  ret self;
}

//     private static Vec3 CalculatePosition(int elevationStepHeight, Pattern pattern, Location location, int elevation) {
//       var positionVec2 = pattern.GetTileCenter(location);
//       var positionVec3 = new Vec3(positionVec2.x, positionVec2.y, elevation * elevationStepHeight);
//       ret positionVec3;
//     }
// 
func SetHighlighted(self &!TerrainTilePresenter, highlighted bool) {
  println("Setting location {self.location} to highlighted={highlighted})");
  set self.highlighted = highlighted;
  self!.RefreshSurfaceColor();
}

func RefreshSurfaceColor(self &!TerrainTilePresenter) {
  self.domino!.SetSurfaceColor(
      self.tileViewId, 
      CalculateTintedFrontColor(&GrassSurfaceColor(), self.highlighted));
}

func RefreshSideColor(self &!TerrainTilePresenter) {
  vassert(self.membersSideColors.len() > 0, "No side color!");
  self.domino!.SetCliffColor(self.tileViewId, GrassSideColor());
}

func RefreshFeature(self &!TerrainTilePresenter) {
  //self.domino!.SetFeature(
  //    self.tileViewId,
  //    if self.membersFeatures.len() == 0 { None<InitialSymbol>() }
  //    else { Some<InitialSymbol>(self.membersFeatures.get(self.membersFeatures.len() - 1).1.clone()) });
}


func RefreshOverlay(self &!TerrainTilePresenter) {
  //println("RefreshOverlay len " + self.membersOverlays.len());
  //self.domino!.SetOverlay(
  //  self.tileViewId,
  //  CalculateMaybeOverlay(&self.membersOverlays));
}

func RefreshItems(self &!TerrainTilePresenter) {
  self.domino!.ClearItems(self.tileViewId);
  foreach [id, item] in self.membersItems {
    self.domino!.AddItem(self.tileViewId, id, item.clone());
  }
}

func SetElevation(self &!TerrainTilePresenter, elevation int) {
  set self.terrainTile.elevation = elevation;
  self.domino!.SetElevation(self.tileViewId, elevation);
}

//func CalculateMaybeOverlay(membersOverlays &List<(i64, InitialSymbol)>) Opt<InitialSymbol> {
//  if membersOverlays.len() == 0 {
//    ret None<InitialSymbol>();
//  }
//  ret Some(membersOverlays.get(membersOverlays.len() - 1).1.clone());
//}
//
//
//func CalculateMaybeFeature(membersFeatures &List<(i64, InitialSymbol)>) Opt<InitialSymbol> {
//  if membersFeatures.len() == 0 {
//    ret None<InitialSymbol>();
//  }
//  ret Some(membersFeatures.get(membersFeatures.len() - 1).1.clone());
//}

func CalculateTintedFrontColor(
    membersFrontColor &Vec4iAnimation,
    highlighted bool)
Vec4iAnimation {
  if (highlighted) {
    ret DivideVec4iAnimation(
        AddVec4iAnimation(
            MultiplyVec4iAnimation(
                membersFrontColor.clone(), ConstantVec4iAnimationAll(87)),
            MultiplyVec4iAnimation(
                ConstantVec4iAnimationWhite(), ConstantVec4iAnimationAll(13))),
        ConstantVec4iAnimationAll(100));
  } else {
    ret membersFrontColor.clone();
  }
}
