
fn JsonNode(self &Vec2i) JsonNode {
  node = JsonObject();
  node.fields!.add("x", self.x.JsonNode());
  node.fields!.add("y", self.y.JsonNode());
  ret node;
}

fn JsonNode(self &Vec3i) JsonNode {
  node = JsonObject();
  node.fields!.add("x", self.x.JsonNode());
  node.fields!.add("y", self.y.JsonNode());
  node.fields!.add("z", self.z.JsonNode());
  ret node;
}

fn JsonNode(self &Vec4i) JsonNode {
  node = JsonObject();
  node.fields!.add("x", self.x.JsonNode());
  node.fields!.add("y", self.y.JsonNode());
  node.fields!.add("z", self.z.JsonNode());
  node.fields!.add("w", self.w.JsonNode());
  ret node;
}

fn JsonNode(virtual self &Vec4iAnimation) JsonNode abstract;
fn JsonNode(self &ConstantVec4iAnimation impl Vec4iAnimation) JsonNode {
  node = JsonObject();
  node.fields!.add("Vec4iAnimation", "ConstantVec4iAnimation".JsonNode());
  node.fields!.add("val", self.val.JsonNode());
  ret node;
}

fn JsonNode(self &Location) JsonNode {
  node = JsonObject();
  node.fields!.add("group_x", self.group_x.JsonNode());
  node.fields!.add("group_y", self.group_y.JsonNode());
  node.fields!.add("index_in_group", self.index_in_group.JsonNode());
  ret node;
}

fn JsonNode(self &InitialTile) JsonNode {
  node = JsonObject();
  node.fields!.add("location", self.location.JsonNode());
  node.fields!.add("elevation", self.elevation.JsonNode());
  node.fields!.add("top_color", self.topColor.JsonNode());
  node.fields!.add("side_color", self.sideColor.JsonNode());
  ret node;
}

fn JsonNode(virtual self &IDominoCommand) JsonNode abstract;
fn JsonNode(self &CreateTileCommand impl IDominoCommand) JsonNode {
  node = JsonObject();
  node.fields!.add("command_type", "CreateTile".JsonNode());
  node.fields!.add("tile_id", self.newTileId.JsonNode());
  node.fields!.add("initial_tile", self.initialTile.JsonNode());
  ret node;
}
fn JsonNode(self &SetupGameCommand impl IDominoCommand) JsonNode {
  node = JsonObject();
  node.fields!.add("command_type", "SetupGame".JsonNode());
  node.fields!.add("look_at", self.look_at.JsonNode());
  node.fields!.add("look_at_offset_to_camera", self.look_at_offset_to_camera.JsonNode());
  node.fields!.add("elevation_step_height", self.elevation_step_height.JsonNode());
  node.fields!.add("pattern", self.pattern.JsonNode());
  ret node;
}

fn JsonNode<T>(list &List<T>) JsonNode {
  ret JsonArray(
      [vary *](
          list.len(),
          &!{ list.get(_).JsonNode() }));
}

fn JsonNode(self &Pattern) JsonNode {
  node = JsonObject();
  node.fields!.add("name", self.name.JsonNode());
  node.fields!.add("shape_index_to_corners", self.shape_index_to_corners.JsonNode());
  node.fields!.add("pattern_tiles", self.pattern_tiles.JsonNode());
  node.fields!.add("x_offset", self.x_offset.JsonNode());
  node.fields!.add("y_offset", self.y_offset.JsonNode());
  ret node;
}

fn JsonNode(self &PatternTile) JsonNode {
  node = JsonObject();
  node.fields!.add("shape_index", self.shape_index.JsonNode());
  node.fields!.add("rotate_radianards", self.rotate_radianards.JsonNode());
  node.fields!.add("translate", self.translate.JsonNode());
  node.fields!.add("side_index_to_side_adjacencies", self.side_index_to_side_adjacencies.JsonNode());
  node.fields!.add("corner_index_to_corner_adjacencies", self.corner_index_to_corner_adjacencies.JsonNode());
  ret node;
}

fn JsonNode(self &PatternSideAdjacency) JsonNode {
  node = JsonObject();
  node.fields!.add("group_relative_x", self.group_relative_x.JsonNode());
  node.fields!.add("group_relative_y", self.group_relative_y.JsonNode());
  node.fields!.add("tile_index", self.tile_index.JsonNode());
  node.fields!.add("side_index", self.side_index.JsonNode());
  ret node;
}

fn JsonNode(self &PatternCornerAdjacency) JsonNode {
  node = JsonObject();
  node.fields!.add("group_relative_x", self.group_relative_x.JsonNode());
  node.fields!.add("group_relative_y", self.group_relative_y.JsonNode());
  node.fields!.add("tile_index", self.tile_index.JsonNode());
  node.fields!.add("corner_index", self.corner_index.JsonNode());
  ret node;
}

