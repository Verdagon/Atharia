
func GameLoop(server &GameInstance) {
  remainingIterations = server.UnitControllers.len() * 3 + 100;

  while
      maybeNextActingUnit = FindNextActingUnit(server);
      not maybeNextActingUnit.isEmpty() {
    if remainingIterations == 0 {
      println("Hit the maximum number of iterations, exiting!");
      break;
    }
    set remainingIterations = remainingIterations - 1;

    nextActingUnit = (maybeNextActingUnit).get();
    println("At {server.gameTime} found next acting unit: {nextActingUnit.id} at {nextActingUnit.nextActionTime}");
    if nextActingUnit.id == server.player.get().id {
      // We will move the player either on their input or on the Timer request.
      break;
    } else {
      Act(unlet nextActingUnit, server);
    }
  }

  if server.units.len() == 1 {
    server.lookPanelView.SetStuff(true, "You have killed all the goblins, victory!", "", List<(InitialSymbol, str)>());
  }
}

func DestroyUnit(server &GameInstance, borrow_unit &Unit) {
  println("Destroying unit: {borrow_unit.id}");

  unitMembership = server.units.remove((unlet borrow_unit).id);

  [unit] = unitMembership;

  if unit.id == server.player.get().id {
    server.lookPanelView.SetStuff(true, "You have died, game over!", "", List<(InitialSymbol, str)>());
  }

  presenter = server.UnitControllers.remove(unit.id);
  Destroy(presenter, server);

  unit;
}

func FindNextActingUnit(server &GameInstance) Opt<&Unit> {
  maybeNextActingUnit Opt<&Unit> = None<&Unit>();

  foreach [id, UnitController] in &server.UnitControllers {
    if UnitController.unit.nextActionTime <= server.gameTime {
      if maybeNextActingUnit.isEmpty() or
          UnitController.unit.nextActionTime < maybeNextActingUnit.get().nextActionTime {
        set maybeNextActingUnit = Some(UnitController.unit);
      }
    }
  }

  ret maybeNextActingUnit;
}

func ProceedPlayer(server &GameInstance) {
  player = &server.player.get();
  println("Proceeding player! game time {server.gameTime} player enxt action time {player.nextActionTime}");

  destination = player.maybeDestination.get("Can't proceed, no destination!");

  path =
      Go(
          &server.terrainController.terrain.pattern,
          player.location,
          destination,
          true,
          (a, b, distanceSoFar) => {
            server.unoccupiedWalkableLocs.contains(b) and
            server.terrainController.terrain.pattern.IsAdjacent(a, b, false)
          });
  if path.len() > 0 {
    nextStepLoc = path.get(0);
    println("There is indeed a path to {destination}, length {path.len()} next step {nextStepLoc}");
    nextStepElevation =
        server.terrainController.terrain.tiles.get(nextStepLoc).get().elevation;
    player.HopTo(server, nextStepLoc, nextStepElevation);
    println("Setting game time from {server.gameTime} to {player.nextActionTime}");

    [x, y] = server.terrainController.terrain.pattern.GetTileCenter(nextStepLoc);
    z = nextStepElevation * server.terrainController.elevationStepHeight;
    pos = Vec3i(x, y, z);
    server.domino.MoveCamera(pos, server.lookatOffsetToCamera, 1000);

    if nextStepLoc == destination {
      println("Player reached destination, stopping!");
      set player.maybeDestination = None<Location>();
    }
  } else {
    println("No path to {destination}, stopping!");
    set player.maybeDestination = None<Location>();
  }
}
