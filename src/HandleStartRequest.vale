
func HandleStartRequest(
  resourcesPath str,
  start_request &StartRequest)
Result<GameInstance, str> {

  domino = GameToDominoConnection();

  pattern = make_pentagon_9_pattern();

  rand = XS32Rand(331460i64);

  terrain = PatternMap<TerrainTile>(make_pentagon_9_pattern());
  unoccupiedWalkableLocs = HashSet<Location>(LocationHasher(), LocationEquator());
  bool_map = MakeMap(&rand);
  foreach [loc, walkable] in bool_map.tiles {
    if walkable {
      terrain.tiles.add(
          loc,
          TerrainTile(loc, 1, walkable, List([#][DecorationComponent("grass")])));
      unoccupiedWalkableLocs.add(loc);
    } else {
      terrain.tiles.add(
          loc,
          TerrainTile(loc, 1, walkable, List([#][DecorationComponent("rocks")])));
    }
  }

  playerLoc =
      unoccupiedWalkableLocs
      .GetRandomElement(TruncateI64ToI32(rand.Next()))
      .get("No eligible player loc?");

  cameraLookAtPosition =
      pattern.GetTileCenter(playerLoc).Vec3i(0); //terrain.GetTileCenter(startLocation);
  lookatOffsetToCamera = Vec3i(0, 5000, -10000);

  domino.SetupGame(
      cameraLookAtPosition,
      lookatOffsetToCamera,
      200,
      pattern);

  vivimap = MemberToViewMapperLoadMap(resourcesPath, "vivimap.json");

  membersView = ListView(&domino, 0, 6, 40, 16);
  lookPanelView = LookPanelView(&domino, start_request.screen_gw, -1, 2);

  terrain_controller = TerrainController(&domino, &vivimap, terrain, 200);

  borrow_domino = &domino;
  borrow_rand = &rand;
  instance =
      GameInstance(
          rand,
          domino,
          vivimap,
          None<Location>(),
          membersView,
          lookPanelView,
          lookatOffsetToCamera,
          terrain_controller,
          HashMap<int, UnitMembership, IntHasher, IntEquator>(IntHasher(), IntEquator()),
          HashMap<int, UnitController, IntHasher, IntEquator>(IntHasher(), IntEquator()),
          TokenedHashMap<Location, &Unit, LocationHasher, LocationEquator>(LocationHasher(), LocationEquator()),
          unoccupiedWalkableLocs,
          None<&Unit>(),
          0i64,
          0);

  playerElevation = instance.terrainController.terrain.tiles.get(playerLoc).get().elevation;
  player = instance.addUnit(Unit(100, playerLoc, playerElevation, true, None<Location>(), 0i64, 30, 30));
  set instance.player = Some(player);

  foreach i in range(0, 10) {
    enemyLoc = instance.unoccupiedWalkableLocs.GetRandomElement(TruncateI64ToI32(borrow_rand.Next())).get("No eligible enemy loc?");
    enemyElevation = instance.terrainController.terrain.tiles.get(enemyLoc).get().elevation;
    instance.addUnit(Unit(101 + i, enemyLoc, 2, false, None<Location>(), 1i64, 5, 5));
  }

  ret Ok<GameInstance, str>(instance);
}

func addUnit(instance &GameInstance, unit Unit) &Unit {
  vassert(not instance.locToUnit.ContainsKey(unit.location), "addUnit: Already unit there?");
  borrow_unit = &unit;
  instance.units.add(unit.id, UnitMembership(unit));
  instance.UnitControllers.add(
      borrow_unit.id,
      UnitController(instance, borrow_unit));
  ret borrow_unit;
}
