
struct LocationMouseDownRequest {
  tile_id int;
  location Location;
}

func HandleLocationMouseDownRequest(
  server &!EditorInstance,
  request &LocationMouseDownRequest)
Result<(), str> {
  domino = &!server.domino;

  println("In HandleLocationMouseDownRequest");
  location = request.location;


  if server.terrainController.tilePresenters.ContainsKey(location) {
    // Add or remove from selection

    newSelection =
        server.selectedLocations.HashSet<Location, LocationHasher, LocationEquator>(
            LocationHasher(), LocationEquator());
    if newSelection.contains(location) {
      newSelection!.remove(location);
    } else {
      newSelection!.add(location);
    }
    server!.SetSelection(newSelection);
  } else if server.terrainController.phantomTilePresenters.ContainsKey(location) {
    phantomTilePresenter =
        server.terrainController.phantomTilePresenters!.remove(location);
    drop(phantomTilePresenter);

    terrainTile = TerrainTile(location, 1, List<str>());
    borrow = &!terrainTile;
    server.terrainController.terrain.tiles!.add(location, terrainTile);
    server.terrainController!.AddTerrainTile(location, borrow);
    //Save();

    newSelection =
        server.selectedLocations.HashSet<Location, LocationHasher, LocationEquator>(
            LocationHasher(), LocationEquator());
    newSelection!.add(location);
    server!.SetSelection(newSelection);
  } else {

  }




  ret Ok<(), str>(());
}
