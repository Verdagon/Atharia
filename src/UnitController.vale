
#!DeriveStructDrop
struct UnitController {
  unit &Unit;
  locToUnitToken HashMapToken<Location, &Unit>;
  view UnitView;
}

func UnitController(
  server &GameInstance,
  unit &Unit)
UnitController {
  view =
      UnitView(
          server.domino,
          if unit.isPlayer {
            InitialUnit(
              unit.location,
              InitialSymbol(
                  InitialSymbolGlyph(
                      SymbolId("AthSymbols", 106),
                      ConstantVec4iAnimation(Vec4i(0, 96, 96, 255))),
                  Some(
                      InitialSymbolOutline(
                          CenteredOutline(),
                          ConstantVec4iAnimation(Vec4i(0, 128, 128, 255)))),
                  None<InitialSymbolSides>(),
                  0,
                  100),
              InitialSymbol(
                  InitialSymbolGlyph(
                      SymbolId("AthSymbols", 57),
                      ConstantVec4iAnimation(Vec4i(255, 255, 255, 380))),
                  Some(
                      InitialSymbolOutline(
                          OuterOutline(),
                          ConstantVec4iAnimation(Vec4i(0, 0, 0, 255)))),
                  None<InitialSymbolSides>(),
                  0,
                  100),
              List<(i64, InitialSymbol)>(),
              unit.hp,
              unit.maxHp)
          } else {
            InitialUnit(
              unit.location,
              InitialSymbol(
                  InitialSymbolGlyph(
                      SymbolId("AthSymbols", 123),
                      ConstantVec4iAnimation(Vec4i(128, 0, 0, 255))),
                  Some(
                      InitialSymbolOutline(
                          CenteredOutline(),
                          ConstantVec4iAnimation(Vec4i(255, 0, 0, 255)))),
                  None<InitialSymbolSides>(),
                  0,
                  100),
              InitialSymbol(
                  InitialSymbolGlyph(
                      SymbolId("AthSymbols", 120),
                      ConstantVec4iAnimation(Vec4i(255, 255, 255, 380))),
                  Some(
                      InitialSymbolOutline(
                          OuterOutline(),
                          ConstantVec4iAnimation(Vec4i(0, 0, 0, 255)))),
                  None<InitialSymbolSides>(),
                  0,
                  100),
              List<(i64, InitialSymbol)>(),
              unit.hp,
              unit.maxHp)
          });


  locToUnitToken = server.locToUnit.add(unit.location, &unit);
  server.unoccupiedWalkableLocs.remove(unit.location);

  self = UnitController(unit, locToUnitToken, view);

  ret self;
}

func OnHop(self &UnitController, server &GameInstance, newLoc Location, newElevation int) {
  self.view.HopTo(server.domino, newLoc, newElevation, 300);
  set server.animationsEndTimeFromNow =
      max(server.animationsEndTimeFromNow, 300);
}

func Destroy(self UnitController, server &GameInstance) {
  [unit, locToUnitToken, view] = self;
  server.locToUnit.remove(unit.location, locToUnitToken);
  (view).Destroy(server.domino);
  set server.animationsEndTimeFromNow =
      max(server.animationsEndTimeFromNow, 500);
  unit;
}

func OnAttack(self &UnitController, server &GameInstance, enemy &Unit) {
  self.view.Lunge(server.domino, enemy.location, 150);
  set server.animationsEndTimeFromNow =
      max(server.animationsEndTimeFromNow, 150);
}

func OnHpChanged(self &UnitController, server &GameInstance) {
  self.view.ChangeHp(server.domino, self.unit.hp);
}
